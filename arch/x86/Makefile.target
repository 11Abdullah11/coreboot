##
## This file is part of the LinuxBIOS project.
##
## Copyright (C) 2006 coresystems GmbH
##
## This program is free software; you can redistribute it and/or modify
## it under the terms of the GNU General Public License as published by
## the Free Software Foundation; either version 2 of the License, or
## (at your option) any later version.
##
## This program is distributed in the hope that it will be useful,
## but WITHOUT ANY WARRANTY; without even the implied warranty of
## MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
## GNU General Public License for more details.
##
## You should have received a copy of the GNU General Public License
## along with this program; if not, write to the Free Software
## Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301 USA
##

#
# This part builds the last 16 byte containing the jmp to the code
# and a date or stamp or pointer to a data structure that flashrom
# might want to read
#

CFLAGS := 

linuxbios.jump: FORCE
	$(Q)echo "Building jump vector"
	$(Q)$(CC) -E $(srctree)/arch/x86/reset.S -o $(objtree)/reset.s -DBOOTBLK=0x1f00 -DRESRVED=0xf0 -DDATE=\"`date +%Y/%m/%d`\"
	$(Q)$(AS) $(objtree)/reset.s -o $(objtree)/reset.o
	$(Q)$(LD) -Ttext 0xfffffff0 -s --oformat binary $(objtree)/reset.o -o $(objtree)/linuxbios.jump
	$(Q)chmod 644 $(objtree)/linuxbios.jump
	$(Q)echo "Len: `wc -c < linuxbios.jump`"

#
# This part takes care of compression. It should build the compression modules
# in a way that they can be put in the lar. FIXME it belongs in lib/ 
#

lzma:
	$(Q)echo "building lzma"


#
# initram is always uncompressed. It belongs into the mainboard directory
# and is build from what was auto.c in v2
#
	
initram:
	$(Q)echo "building initram"

#
# this is the rest of linuxbios (v2: linuxbios_ram.rom) 
# Is this maybe platform independent, except for the "drivers"? 
# Where should it be built?
#
# This needs to be compressed with the default compressor
#

linuxbios_ram: statictree.o
	$(Q)echo "building linuxbios_ram"

#
# The payload as we love it. Get it from somewhere.
# Is this a place to incorporate buildrom?
# 
# This needs to be compressed with the default compressor
#
	
payload:
	$(Q)echo "building payload"


#
# build the lar archive
#
	
linuxbios.lar: $(objtree)/lar lzma linuxbios.initram linuxbios_ram payload 
	$(Q)echo "Building LinuxBIOS archive..."
	$(Q)mkdir $(objtree)/lar.tmp
	$(Q)mkdir $(objtree)/lar.tmp/normal
	$(Q)cp $(objtree)/linuxbios.initram $(objtree)/lar.tmp/normal/initram
	$(Q)cd $(objtree)/lar.tmp && ../lar c ../linuxbios.lar.pre normal/initram 
	# TODO: dynamically pad the lar archive. bs is image size - bootblock size (8k)
	$(Q)dd if=$(objtree)/linuxbios.lar.pre of=$(objtree)/linuxbios.lar bs=253952 count=1 conv=sync

#
# this is going to be the enable car code, lar parser and such:
#

INITCFLAGS=-I$(srctree)/include/cpu/generic/x86 -I$(srctree)/include -fno-builtin -Os

linuxbios.init: 
	$(Q)echo Building linuxbios.init
	#
	# asm stub
	$(Q)$(CC) -E $(srctree)/arch/x86/init.S -o $(objtree)/init.s 
	$(Q)$(AS) $(objtree)/init.s -o $(objtree)/init.o
	#
	# main
	$(Q)$(CC) $(INITCFLAGS) -c $(srctree)/arch/x86/cachemain.c -o cachemain.o
	#
	$(Q)$(CC) $(INITCFLAGS) -c $(srctree)/lib/lar.c -o lar.o
	#
	# console lib
	$(Q)$(CC) $(INITCFLAGS) -c $(srctree)/arch/x86/console.c -o console.o
	$(Q)$(CC) $(INITCFLAGS) -c $(srctree)/arch/x86/serial.c -o serial.o
	$(Q)$(CC) $(INITCFLAGS) -c $(srctree)/console/vtxprintf.c -o vtxprintf.o
	$(Q)$(CC) $(INITCFLAGS) -c $(srctree)/lib/uart8250.c -o uart8250.o

	# TODO: dynamic start address 4G - 0x2000 (bootblock size)
	$(Q)$(LD) -Ttext 0xffffe000 -s --oformat binary init.o cachemain.o console.o uart8250.o \
		serial.o vtxprintf.o lar.o -o linuxbios.init.pre

	# Pad boot block to 0x2000 - 0x100 
	$(Q)dd if=linuxbios.init.pre of=linuxbios.init bs=7936 conv=sync
	$(Q)echo "Len: `wc -c < linuxbios.init.pre`"
	#
	$(Q)test `wc -c < linuxbios.init.pre` -gt 7936  && echo "Error. Bootblock got too big" || true

#
# Compose the image:
#
	
linuxbios.rom: linuxbios.lar linuxbios.init linuxbios.vpd linuxbios.jump
	$(Q)cat $(objtree)/linuxbios.lar $(objtree)/linuxbios.init \
		$(objtree)/linuxbios.vpd $(objtree)/linuxbios.jump > \
		$(objtree)/linuxbios.rom

$(objtree)/lar:
	$(MAKE) -C $(srctree)/util/lar
	cp $(srctree)/util/lar/lar $(objtree)


.PHONY: linuxbios.rom
